@page "/library"

<h1>Library</h1>

@if(steamPath == null)
{
    <p>Unable to automatically locate Portal's addon directory. Please make sure steam is running and reload this page.</p>
    <button class="btn btn-primary" @onclick="LocatePath">Reload</button>
}
else
{
    <p role="status">Addon Installation Path: @portalAddonPath</p>
}



<div class="addons-list">
    @foreach (var (addonFile, index) in GetAddonFiles().Select((addon, index) => (addon, index)))
    {
        <div class="addon-card">
            <div class="addon-header">
                <div>
                    <h2>@addonFile.JsonData.Name</h2>
                    <p class="author">@addonFile.JsonData.Author</p>
                </div>
            </div>
            <!--<input type="checkbox" id="switch@(index)" /><label for="switch">Toggle</label>-->

            <label class="switch" style="background: @BackgroundColor" @onclick="ToggleSwitch">
                <input type="checkbox" @bind="IsSwitchChecked" id="switch(@index)"/>
                <div></div>
            </label>
        </div>
    }
</div>


<style>
    .addons-list {
        margin-top: 20px;
    }

    .addon-card {
        background-color: #f8f8f8;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
    }

    .addon-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .addon-card h2{ 
        margin: 0;
        font-size: 1.2em;
    }

    .author {
        margin: 0;
        font-size: 0.8em;
    }

    .addon-description {
        margin-top: 10px;
    }

    /*SWITCHES STYLES*/
    .switch input {
        position: absolute;
        opacity: 0;
    }

    /**
     * 1. Adjust this to size
     */

    .switch {
        display: inline-block;
        font-size: 20px; /* 1 */
        height: 1em;
        width: 2em;
        border-radius: 1em;
        transition: all 300ms;
    }

    .switch input:checked + div {
        transform: translate3d(100%, 0, 0);
    }

    .switch div {
        height: 1em;
        width: 1em;
        border-radius: 1em;
        background: #FFF;
        box-shadow: 0 0.1em 0.3em rgba(0,0,0,0.3);
        transition: all 300ms;
    }
    
</style>

@code {

    private static string? steamPath;
    private static string? portalAddonPath;

    private bool[] switchStates = new bool[5];

    [Parameter] public bool IsSwitchChecked { get; set; }

    private string BackgroundColor => IsSwitchChecked ? "#43a1f9" : "#d1d1d1";

    private void ToggleSwitch()
    {
        IsSwitchChecked = !IsSwitchChecked;
    }

    protected override void OnInitialized()
    {
        LocatePath();
    }

    private void LocatePath()
    {
        if (steamPath == null)
        {
            Process[] steam = Process.GetProcessesByName("steam");
            if (steam.Length > 0)
            {
                steamPath = steam[0].MainModule.FileName;

                if (steamPath != null)
                {
                    steamPath = steamPath.Remove(29, 9);
                }

                if (portalAddonPath == null)
                {
                    portalAddonPath = steamPath + "steamapps\\common\\Portal\\portal\\custom";
                }

                Debug.WriteLine(portalAddonPath);

            }
            else
            {
                Debug.WriteLine("Unable to find Steam. Make sure it is open.");
            }
        }
        else
        {
            return;
        }
    }

    private IEnumerable<AddonInfo> GetAddonFiles()
    {
        if (Directory.Exists(portalAddonPath))
        {
            var vpkFiles = Directory.GetFiles(portalAddonPath, "*.vpk");

            foreach (var vpkFile in vpkFiles)
            {
                var baseName = Path.GetFileNameWithoutExtension(vpkFile);
                var jsonFile = Path.Combine(portalAddonPath, $"{baseName}.json");

                if (File.Exists(jsonFile))
                {
                    var jsonData = JsonConvert.DeserializeObject<AddonData>(File.ReadAllText(jsonFile));
                    yield return new AddonInfo
                        {
                            Name = baseName,
                            JsonData = jsonData
                        };
                }
                else
                {
                    // Set default values for addons without a matching JSON file
                    yield return new AddonInfo
                        {
                            JsonData = new AddonData
                            {
                                Name = Path.GetFileName(vpkFile),
                                Author = "Unknown Author",
                                Description = "Unknown Addon"
                            }
                        };
                }
            }
        }
        else
        {
            Debug.WriteLine("Portal addon path not found.");
        }

        // Use yield break to end the iteration
        yield break;
    }


    private class AddonInfo
    {
        public string Name { get; set; } = string.Empty;
        public AddonData JsonData { get; set; } = new AddonData();
    }

    public class AddonData
    {
        public string Name { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}
